package com.jomkie.datastructure.suanfa.charactersequence;

/**
 * 分治算法
 * 将原问题分解成若干个规模较小的问题（子问题和原问题结构一样，只是规模不一样）
 * 子问题又不断分解成规模更小的问题，直到不能再分解（直到可以轻易计算出子问题的解）
 * 利用子问题的解推导出原问题的解
 * 因此，分治策略非常适合用递归
 */
public class DivideAndConquerTest {

    /**
     * 子序列：从一个串中按顺序任意选择元素组成新的串称为大序列（原来的串）的子序列
     *    子序列：元素在原串中不一定是连续的
     *    子串（在原数据中必须连续）：其实就是串元素在原串中是连续的，相当于是特殊的子序列
     *    子数组（在原数据中必须连续）：在原数组中元素必须是连续的
     *    子区间（在原数据中必须连续）：
     */
    public static void main(String[] args) {
    }


}
